
+++++++++++++++++++++++++++++++++++++++
 vertex/element buffer object
+++++++++++++++++++++++++++++++++++++++

====================================================================================================
 void glGenBuffers(GLsizei n, GLuint* buffers);
----------------------------------------------------------------------------------------------------
创建一个vbo，相当于Context3D的createVertexBuffer(..)或createIndexBuffer(..)

- n: 要产生的vbo对象的数量
- buffers: attribute的句柄





====================================================================================================
 void glBindBuffer(GLenum target, GLuint buffer);
----------------------------------------------------------------------------------------------------
绑定vbo（切换当前的vertex状态）

- target枚举: 
	GL_ARRAY_BUFFER（顶点数据）
	GL_ELEMENT_ARRAY_BUFFER（索引数据）
	...
	GL_PIXEL_PACK_BUFFER（从OpenGL获取的像素数据）
	GL_PIXEL_UNPACK_BUFFER（传递给OpenGL的像素数据）

- opengl允许同时绑定多个缓冲，只要它们是不同的缓冲类型。



====================================================================================================
 void glBufferData(GLenum target, GLsizeptr size, const GLvoid* data, GLenum usage);
----------------------------------------------------------------------------------------------------
相当于VertexBuffer3D或IndexBuffer3D的upload???(..)，该方法仅负责上传数据

- target: 缓冲区对象的类型
- size: 缓存区对象字节数
- data: 指针，用于拷贝到缓冲区对象的数据
- usage枚举: GL_STATIC_DRAW / GL_DYNAMIC_DRAW / GL_STREAM_DRAW





====================================================================================================
 GLint glGetAttribLocation(GLuint program, const GLchar* name);
----------------------------------------------------------------------------------------------------
定义一个属性名称并返回其位置

- program: GLProgram对象id
- name: GLSL中的顶点属性名称

ps.
使用该方法将与特定program之间产生强耦合!!不推荐使用!!




====================================================================================================
 void glBindAttribLocation(GLuint program, GLuint index, const GLchar* name);
----------------------------------------------------------------------------------------------------
同上...






====================================================================================================
 void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
----------------------------------------------------------------------------------------------------
相当于Context3D的setVertexBufferAt(..)，本质上，是配置VBO里的顶点数据的使用方式。

- index: attribute索引
- size: 该属性由几个comp组成，如texCoord为2个。size指定每个属性值的组件数量且必须为1、2、3、4之一
- type: 该属性的数据格式(一般为GL_FLOAT)
- normalized: 是否标准化，将所有值映射在0.0-1.0范围内(一般为GL_FALSE)
- stride: 步长，如果为0，则表示它们是紧密排列在一起的。
- pointer: 指针偏移量，表示第N个作为起点（(GLvoid*)0则表示偏移为0）

ps.
调用该方法时，必须保证当前绑定VBO不为空（glBindBuffer×GL_ARRAY_BUFFER）



====================================================================================================
 void glEnableVertexAttribArray / glDisableVertexAttribArray(GLuint index);
----------------------------------------------------------------------------------------------------
启用VAO中对应的顶点属性数组，就是告诉GLSL存在顶点属性va0, va1..

- index: 指定了需要启用的顶点属性数组的索引







====================================================================================================
 void glGetActiveAttrib（GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
----------------------------------------------------------------------------------------------------
由attribute的index，获取指定program内关联的attribute信息（名称，类型）

- program: 着色器句柄
- index: 分配的location
- maxLength: name的字符数组最大长度
- length: 获取到的name实际长度
- size: 个数
- type: 类型
- name: 名称





====================================================================================================
 void glBufferSubData(GLenum target, GLintptr offset, GLsizeptr size, const GLvoid* data);
----------------------------------------------------------------------------------------------------
为一个已存在的缓冲区对象上传部分数据

# target
# offset: 指定更新数据相对于缓存区对象中原始数据开始位置的偏移量
# size
# data







====================================================================================================
 GLvoid* glMapBuffer(GLenum target, GLenum access);
----------------------------------------------------------------------------------------------------
手动访问buffer（可读写），可由该方法查询当前buffer里的数据!!

# target: 
# access: 访问权限
	- GL_WRITE_ONLY
	- GL_READ_ONLY

# return: 当前绑定buffer的内存指针

ps.
1. 使用前，保证调用过glBufferData开辟出一片内存空间，才可使用。否则将返回空指针。
例如: glBufferData(GL_ARRAY_BUFFER, sizeof(???), nullptr, GL_DYNAMIC_DRAW);

2. 使用后，务必再调用glUnmapBuffer该方法"收尾"，否则绘制失败。





====================================================================================================
 void glDeleteBuffers(GLsizei n, const GLuint* arrays);
----------------------------------------------------------------------------------------------------








+++++++++++++++++++++++++++++++++++++++
 vertex array object
+++++++++++++++++++++++++++++++++++++++

VAO是一个用来管理VBO的容器，可以包括多个VBO。由于它进一步将VBO容于其中，所以绘制效率将在VBO的基础上更进一步。


====================================================================================================
 void glGenVertexArrays(GLsizei n, GLuint* arrays);
----------------------------------------------------------------------------------------------------
创建vao

- n: 要产生的vao对象的数量，可传入&vao_A或vaoArr（一般为1个）







====================================================================================================
 void glBindVertexArray(GLuint array);
----------------------------------------------------------------------------------------------------
切换VAO状态

- array: buffer状态句柄。当其为0时，GL的全部buffer设定将重置回原始状态!!
（重置时，为何后面要接: glBindBuffer(GL_ARRAY_BUFFER, 0)...?????待实战深入探究!!）

存储的状态因素:
- glBindBuffer，包含vertex和indice
- glVertexAttribPointer
- glEnableVertexAttribArray





====================================================================================================
 void glDeleteVertexArrays(GLsizei n, const GLuint* buffers);
----------------------------------------------------------------------------------------------------














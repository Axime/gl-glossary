
+++++++++++++++++++++++++++++++++++++++
 framebuffer（FBO）
+++++++++++++++++++++++++++++++++++++++
帧缓存是包含N种屏幕缓存的一种容器

ps. 改变FBO的attachment，比在FBO之间切换要快得多!!




====================================================================================================
 void glGenFramebuffers(GLsizei n, GLuint* framebuffers);
----------------------------------------------------------------------------------------------------
生成帧缓存






====================================================================================================
 void glBindFramebuffer(GLenum target, GLuint framebuffer);
----------------------------------------------------------------------------------------------------
切换当前帧缓存

# target:（fb枚举值）
	- GL_FRAMEBUFFER（both，默认值）
	- GL_READ_FRAMEBUFFER
	- GL_DRAW_FRAMEBUFFER

# framebuffer: fb句柄，当为0时，将切换回系统默认fb



====================================================================================================
 void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
----------------------------------------------------------------------------------------------------
将纹理对象加入到帧缓存

# target: fb枚举值，一般为GL_FRAMEBUFFER
# attachment: 附着对象的类型
	- GL_COLOR_ATTACHMENT0
	- GL_COLOR_ATTACHMENT1（多渲染目标!!）
	...
	- GL_DEPTH_ATTACHMENT
	- GL_STENCIL_ATTACHMENT
	- GL_DEPTH_STENCIL_ATTACHMENT


# textarget: 纹理类型，如GL_TEXTURE_2D
# texture: 纹理handle
# level: mipmap，一般为0





====================================================================================================
 void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
----------------------------------------------------------------------------------------------------
将RBO加入到帧缓存

# target: fb枚举值，一般为GL_FRAMEBUFFER
# attachment: 
# renderbuffertarget: RBO类型，如GL_RENDERBUFFER
# renderbuffer: 渲染缓存handle




====================================================================================================
 GLenum glCheckFramebufferStatus(GLenum target);
----------------------------------------------------------------------------------------------------

# ret枚举:
	- GL_FRAMEBUFFER_COMPLETE





====================================================================================================
 void glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers);
----------------------------------------------------------------------------------------------------










+++++++++++++++++++++++++++++++++++++++
 renderBuffer（RBO）
+++++++++++++++++++++++++++++++++++++++
- 渲染缓存对象直接将数据写入缓存，不会有任何特定纹理格式的转换，所以效率更高。
- 可写不可读


====================================================================================================
 void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
----------------------------------------------------------------------------------------------------
生成渲染缓存handle






====================================================================================================
 void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
----------------------------------------------------------------------------------------------------

# target:
	- GL_RENDERBUFFER





====================================================================================================
 void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
----------------------------------------------------------------------------------------------------

# target:
# internalformat:
# width:
# height:




====================================================================================================
 GLboolean glIsRenderbuffer(GLuint renderbuffer);
----------------------------------------------------------------------------------------------------





====================================================================================================
 void glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers);
----------------------------------------------------------------------------------------------------












